<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yedam.mohobby.mapper.sns.SnsMapper">
    <!-- 
		 * @create 2022/10/07
		 * @author sunjin
		 * @title /sns sql
	-->
   <!-- 
   
   		피드
   		 
   	-->
   <!-- 게시글 입력 -->
   <insert id="insertFeed" parameterType="int">
      INSERT INTO sns_post (
                        post_id,
                        member_id,
                        hashtag,
                        content,
                        write_date,
                        thumbnail,
                        likes,
                        cmts
                       )
                  VALUES(
                         post_id_seq.nextval,
                        #{ memberId },
                        #{ hashtag },
                        #{ content },
                        #{ writeDate },
                        #{ thumbnail },
                        0,
                        0
                        )
   </insert>
   <!-- 게시물 이미지 -->
	<insert id="insertMedia" parameterType="com.yedam.mohobby.service.sns.SnsMediaVO">
      INSERT INTO sns_media (
						      media_id,
						      post_id,
						      media_type,
						      img_url,
						      video_url,
						      fileName,
						      fileRealname,
						      dirName
						     )
				      VALUES(
						      media_id_seq.nextval,
						      #{ postId },
						      #{ mediaType },
						      #{ imgUrl },
						      #{ videoUrl },
						      #{ file_name },
						      #{ file_realname },
						      #{ dir_name }
						     )
						      
   </insert>
   <!-- 피드수정 - 내용, 해시태그 -->
   <update id="updateFeed" parameterType="com.yedam.mohobby.service.sns.SnsPostVO">
      UPDATE sns_post 
      SET contents = #{ contents }, hashtag = #{ hashtag }
      WHERE post_id = #{ postId }
   </update>
   <!-- 피드삭제 -->
   <delete id="deleteFeed" parameterType="com.yedam.mohobby.service.sns.SnsPostVO">
      DELETE FROM sns_post
      WHERE post_id = #{ postId }
   </delete>
   <!-- 유저x- 인기강사피드조회 top20 -->
   <select id="hotLecturerList" resultType="com.yedam.mohobby.service.sns.SnsPostVO">
      SELECT post_id, member_id, content, thumbnail, likes, cmts
      FROM (
            SELECT s.post_id
            ,s.member_id
            ,s.content
            ,s.thumbnail
            ,s.likes
            ,s.cmts
            FROM sns_post s JOIN member m
            ON(s.member_id = m.member_id)
            WHERE m.role = 1
            ORDER BY likes DESC
           )
      WHERE ROWNUM <![CDATA[ <= ]]> 20
   </select>
   <!-- 유저o- 취미기반 인기강사피드조회 top20 -->
<!--    <select id="hotLecturerList" resultType="com.yedam.mohobby.service.sns.SnsPostVO">
      SELECT post_id, member_id, content, thumbnail, likes, cmts
      FROM (
            SELECT s.post_id
            ,s.member_id
            ,s.content
            ,s.thumbnail
            ,s.likes
            ,s.cmts
            FROM sns_post s JOIN member m
            ON(s.member_id = m.member_id)
            WHERE m.role = 1
            ORDER BY likes DESC
           )
      WHERE ROWNUM <![CDATA[ <= ]]> 20
   </select> -->
   <!-- 전체피드조회 -->
   <select id="allList" resultType="com.yedam.mohobby.service.sns.SnsPostVO">
      SELECT post_id, member_id, thumbnail, likes, cmts 
      FROM sns_post
   </select>
   <!-- 최신피드조회 -->
   <select id="newList" resultType="com.yedam.mohobby.service.sns.SnsPostVO">
      SELECT post_id, member_id, thumbnail, likes, cmts 
      FROM sns_post
      ORDER BY post_id DESC
   </select>
   <!-- 인기피드조회 -->
   <select id="hotList" resultType="com.yedam.mohobby.service.sns.SnsPostVO">
      SELECT post_id, member_id, thumbnail, likes, cmts
      FROM sns_post
      ORDER BY likes DESC
   </select>
   
   <!-- 프로필 조회 -->
   
   <!-- 취미 수 조회-->
   
   <!-- 유자 게시글 수 조회 -->
   <!--
   <select id="getUserPostCnt" resultType="com.yedam.mohobby.service.sns.SnsPostVO">
	   	SELECT count(post_id)
	   	FROM sns_post
	   	WHERE member_id = #{ memberId }
   </select>
   -->
   <!-- 팔로워수 -->
   <!--
   <select id="getUserFollowerCnt" resultType="com.yedam.mohobby.service.sns.SnsFollowVO">
	   	SELECT count(follower_id)
	   	FROM follow
	   	WHERE following_id = #{ folloingId }
   </select>
   -->
   <!-- 팔로잉수 -->
   <!-- 
   <select id="getUserFollowingCnt" resultType="com.yedam.mohobby.service.sns.SnsFollowVO">
   		SELECT count(following_id)
	   	FROM follow
	   	WHERE follower_id = #{ followerId }
   </select>
   -->
   <!-- 유저아이디, 유저별명, 전체 게시글 수, 팔로워수, 팔로잉수, (취미수?) --> 
<!--<select id="feedProfile" resultType="hashmap">
      SELECT m.member_id, m.nickname, m.profile_img, m.hobbies, m.intro, count(s.post_id),
      count(f.following_id), count(f.follower_id)
      FROM
      sns_post s LEFT OUTER JOIN member m
      ON (m.member_id = s.member_id)
      WHERE member_id = #{ memberId }
   </select>-->
   <!-- 유저피드목록조회 -->
   <!-- 
   <select id="getUserFeed" resultType="com.yedam.mohobby.service.sns.SnsPostVO">
      SELECT post_id, member_id, thumbnail, likes, cmts
      FROM sns_post
      WHERE member_id = #{ memberId }
      ORDER BY post_id
   </select
	-->
   
   
   
   <!--

			해시태그

   			게시글 테이블에 들어온 해시태그들(#사과,#바나나)을 특정 문자 기준으로 잘라서 별도의 해시태그 테이블에 넣는다 
			   1. 이미 테이블에 존재하는 해시태그면 update 사용횟수
			   2. 테이블에 존재하지 않는 해시태그면 insert 
   -->
   <!-- 조회수만업뎃 - 이미 등록되어있는 해시태그 -->
   <!-- hashVO, snsPostVO -->
   <update id="updateHashtag" parameterType="hashmap">
    MERGE INTO hashtag h
        USING (SELECT 					
       <![CDATA[REGEXP_SUBSTR(hashtag, '[^,]+', 1, Level) hashtag]]>
                FROM sns_post
                WHERE hashtag IS NOT NULL
                AND post_id = #{ postId }
       <![CDATA[CONNECT BY LEVEL <= REGEXP_COUNT(hashtag, '[^,]+')]]> 		
                AND PRIOR post_id  = post_id 		
                AND PRIOR DBMS_RANDOM.VALUE IS NOT NULL
               ) p
          ON (h.hashtag = p.hashtag)
        WHEN MATCHED THEN UPDATE SET h.use_count = h.use_count+1
        WHEN NOT MATCHED THEN
            INSERT(h.hashtag)
            VALUES(p.hashtag);
   </update>
 
   <!-- 
   
   		팔로우
   
   -->
   <!-- 팔로우목록 -->
   <!-- 팔로우 -->
   <insert id="follow" parameterType="com.yedam.mohobby.service.sns.SnsFollowVO">
     <selectKey keyProperty="followId" resultType="Integer" order="BEFORE">
        SELECT NVL(MAX(follow_id), 0)+1 FROM follow
     </selectKey>
     	INSERT INTO follow (
					      follow_id,
					      following_id,
					      follower_id
					  	)
		       VALUES
				       (
					      #{ followId },
					      #{ followingId },
					      #{ followerId }
   						   )
   </insert>
   <!-- 언팔로우 -->
   <delete id="unfollow" parameterType="com.yedam.mohobby.service.sns.SnsFollowVO">
      DELETE FROM follow
      WHERE followerId = #{ follower_id }
      AND followingId = #{ following_id }
   </delete>
   <!-- 팔로잉조회 -->
   <select id="getfollowingList" resultType="com.yedam.mohobby.service.sns.SnsFollowVO">
   	  SELECT f.following_id, m.profile_img, m.nickname, m.intro
   	  FROM follow f, member m
   	  WHERE f.follower_id = m.member_id
   	  AND follower_id = #{ followerId }
   </select>
   <!-- 팔로워조회 -->
   <select id="getfollowerList" resultType="com.yedam.mohobby.service.sns.SnsFollowVO">
      SELECT f.follower_id, m.profile_img, m.nickname, m.intro 
   	  FROM follow f, member m
   	  WHERE f.follower_id = m.member_id
   	  AND following_id = #{ followingId }
   </select>
   <!-- 
	
			검색
			
	-->
	<!-- 유저전체검색 -->
	<select id="getUsers" resultType="com.yedam.mohobby.service.user.MemberVO">
		SELECT member_id, profile_img, nickname
		FROM member
	</select>
	<!-- 유저단건검색 -->
	<select id="getOneUser" resultType="com.yedam.mohobby.service.user.MemberVO">
		SELECT member_id, profile_img, nickname
		FROM member
		<where>
			<choose>
				<when test="member_id != null AND memberId != null">
					member_id = LOWER(#{ memberId })
				</when>
				<otherwise>
			        member_id like LOWER('%' || #{ pattern } || '%')
			    </otherwise>
			</choose>
		</where>
	</select>
   <!-- 해시태그검색 -->
   <select id="searchHashtag" resultType="com.yedam.mohobby.service.sns.SnsPostVO">
      SELECT * FROM sns_post
      WHERE hashtag = #{ hashtag }
      ORDER BY post_id DESC
   </select>

   <!-- 유저닉네임검색(단어포함 - 프로필사진, 아이디, 닉네임) -->
   <select id="getUsersByNick" resultType="com.yedam.mohobby.service.sns.SnsPostVO">
      SELECT profile_img, member_id, nickname
      FROM member
      WHERE nickname LIKE '%' || #{ nickname } || '%'
   </select>

   <!-- 리스트 해시태그 5개 -->
   


   <!-- 
   
   		좋아요
   
    -->
   <insert id="addLike" parameterType="com.yedam.mohobby.service.communal.JjimVO">
      INSERT INTO jjim(
                    member_id
                    ,target_id
                    ,target_type
                  )
              VALUES(
                  #{ memberId }
                  ,#{ targetId }
                  ,2
                  )
   </insert>
   <!-- 좋아요취소 -->
   <delete id="deleteLike" parameterType="com.yedam.mohobby.service.communal.JjimVO">
      DELETE FROM jjim 
      WHERE target_id = #{ targetId } 
      AND member_id = '#{ memberId }'
      AND target_type = 2
   </delete>
   <!-- 좋아요 누적 -->
   <update id="sumLikes" parameterType="com.yedam.mohobby.service.sns.SnsPostVO">
      UPDATE sns_post 
      SET likes = (
	                  SELECT count(*) 
	                  FROM jjim 
	                  WHERE target_id = #{ targetId }
	                  AND target_type = #{ targetType } 
                  )
      WHERE post_id = #{ postId }
   </update>


	<!--
	
			댓글
			
	 -->
	 <!-- 댓글입력 -->
	 <insert id="inserCmt" parameterType="com.yedam.mohobby.service.communal.CommentsVO">
	 	INSERT INTO comments (
	 							comm_id,
	 							member_id,
	 							target_id,
	 							target_type,
	 							content,
	 							write_date
	    					  )
	    			 VALUES (
	    						 comm_seq.nextval
	    						,#{ memberId }
	    						,#{ targetId }
	    						,#{ targetType }
	    						,#{ content }
	    						,SYSDATE
	    					)
	 </insert>
	<!-- 댓글수정 -->
	<update id="updateCmt" parameterType="com.yedam.mohobby.service.communal.CommentsVO">
		UPDATE comments SET content = # { content },
							write_date = SYSDATE
		WHERE comm_id = #{ commId }
	</update>
	<!-- 댓글삭제 -->
	<delete id="deleteCmt" parameterType="int">
		DELETE FROM comments
		WHERE comm_id = #{ commId } 
	</delete>
	<!-- 댓글조회 -->
	<select id="getCmtList" resultType="com.yedam.mohobby.service.communal.CommentsVO">
		SELECT * FROM comments
		START WITH parent_comm_id IS NULL
		CONNECT BY PRIOR comm_id = parent_comm_id
	</select>
	
	<!--
	
			대댓글
			
	 -->
	<!-- 대댓입력 -->
	<insert id="insertReCmt" parameterType="com.yedam.mohobby.service.communal.CommentsVO">
			 	INSERT INTO comments (
		 							comm_id,
		 							member_id,
		 							parent_comm_id,
		 							target_id,
		 							target_type,
		 							content,
		 							write_date
	    					  	)
		    			 VALUES (
		    						 comm_seq.nextval
		    						,#{ memberId }
		    						,#{ parentCommId }
		    						,#{ targetId }
		    						,#{ targetType }
		    						,#{ content }
		    						,SYSDATE
		    					)
	</insert>
	<!-- 대댓수정 -->
	<update id="updateReCmt" parameterType="int">
		UPDATE comments SET content = # { content },
							write_date = SYSDATE
		WHERE comm_id = #{ commId }
		AND 
	</update>
	<!-- 대댓삭제 -->
	<delete id="deleteReCmt" parameterType="int">
		DELETE FROM comments
		WHERE parent_comm_id = #{ parentCommId }
		AND comm_id = #{ commId }
	</delete>
</mapper>